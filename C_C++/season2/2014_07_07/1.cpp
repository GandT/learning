#include <stdio.h>#include <assert.h>#include <ctype.h>#include <string.h>#include <iostream>#include <string>using namespace std;string	S;				//文字列クラスsize_t	cursor = 0;		//解析カーソル位置/*****数字一文字の読み出し*****/int digit(){	//文字が数字かどうかの判定	assert( isdigit(S[cursor]) );		//数字を表す文字を実際の数字に変換	int num = S[cursor] - '0';				//0〜9は連続しているので0の文字で引けば0が0になる		//カーソルを進める	++cursor;		//解析した数字を返す	return num;}/*****数字の読み出し*****/int number(){	//一文字読み込む	int num = digit();		//カーソルが文字列中の文字を指し示しておりそれが数字である限りループ	while(cursor < S.size() && isdigit( S[cursor]) )				//桁数を合わせる		num = num * 10 + digit();			//読み終えた数字を返す	return num;}//プロトタイプ宣言int calculate();/*****優先計算の処理*****/int priority(){	//優先計算開始記号を見つけた場合以外は一般の計算を行う	if( S[cursor] != '(' )return number();		/*ーーーーーー以下は優先計算の処理であるーーーーー*/		//カーソルを進める	++cursor;		//優先計算内の処理を行う	int num = calculate();		//優先計算終了記号にカーソルがあることを確認する	assert( S[cursor] == ')' );		//カーソルを進める	++cursor;		//優先計算結果を返す	return num;}/*****計算を優先的に行う単位ごとの計算*****/int term(){	//一文字目の数字を読み込む	int a = priority();		//カーソルが文字列中の文字を指し示しておりそれが*または/である限りループ	while(cursor < S.size() && (S[cursor] == '*' || S[cursor] == '/') ){				//符号の読み込み		char exp = S[cursor];				//カーソルを一つ進める		++cursor;				//二文字目以降の読み込み		int b = priority();				//かけ算または割り算を行う		if(exp == '*')	a *= b;		else			a /= b;	}		//計算結果を返す	return a;}//*****和差計算を行う*****/int calculate(){	//第一計算単位の計算	int result = term();		/*****符号が存在する限りループ*****/	while(S[cursor] == '+' || S[cursor] == '-'){				//符号の読み込み		char exp = S[cursor];				//カーソルを一つ進める		++cursor;				//第二計算単位(以降)の計算		int b = term();				//足し算または引き算を行う		if(exp == '+')	result += b;		else			result -= b;	}		//計算結果を返す	return result;}int main(){	//計算回数を受け取る	int n;	cin >> n;		//指定回数のループ	for(int i = 0;i < n;++i){				//カーソル位置の初期化		cursor = 0;				//文字列の読み込み		cin >> S;				//最後の = を無視して文字列サイズを再定義		S.resize(S.size() - 1);				//計算し結果を出力		cout << calculate() << endl;	}}